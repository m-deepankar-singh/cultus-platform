import { NextRequest, NextResponse } from 'next/server';
import { generateInterviewQuestions } from '@/lib/ai/question-generator';
import { Background, StudentProfile } from '@/lib/ai/interview-config';
import { authenticateApiRequestUltraFast } from '@/lib/auth/api-auth';

export async function GET(request: NextRequest) {
  try {
    // JWT-based authentication (0 database queries)
    const authResult = await authenticateApiRequestUltraFast(['student']);
    if ('error' in authResult) {
      return NextResponse.json({ error: authResult.error }, { status: authResult.status });
    }
    const { user, supabase } = authResult;

    const url = new URL(request.url);
    const backgroundId = url.searchParams.get('backgroundId');
    
    if (!backgroundId) {
      return NextResponse.json(
        { error: 'Background ID is required' },
        { status: 400 }
      );
    }

    // Get student profile - only get specific fields needed
    const { data: student, error: studentError } = await supabase
      .from('students')
      .select('id, full_name, job_readiness_tier, job_readiness_star_level, job_readiness_background_type')
      .eq('id', user.id)
      .single();
      
    if (studentError || !student) {
      return NextResponse.json(
        { error: 'Student record not found' },
        { status: 404 }
      );
    }

    // Get background information from the correct table
    const { data: background, error: backgroundError } = await supabase
      .from('job_readiness_background_interview_types')
      .select('id, background_type, interview_focus_area, question_quantity, grading_criteria')
      .eq('background_type', backgroundId)
      .single();
      
    if (backgroundError || !background) {
      return NextResponse.json(
        { error: 'Background not found' },
        { status: 404 }
      );
    }

    // Format data for question generation
    const backgroundData: Background = {
      id: background.id,
      name: background.background_type,
      description: background.interview_focus_area,
      skills: [], // Will be populated based on background_type
      focus_areas: [background.interview_focus_area]
    };

    // Add skills based on background type
    switch (background.background_type) {
      case 'COMPUTER_SCIENCE':
        backgroundData.skills = ['Programming', 'Problem Solving', 'Technical Communication', 'Software Development'];
        break;
      default:
        backgroundData.skills = ['Communication', 'Problem Solving', 'Analytical Thinking'];
    }

    const studentProfile: StudentProfile = {
      id: student.id,
      full_name: student.full_name, // Use the full_name directly from students table
      background_type: student.job_readiness_background_type || 'COMPUTER_SCIENCE',
      job_readiness_tier: student.job_readiness_tier || 'BRONZE',
      job_readiness_star_level: student.job_readiness_star_level || 'FOUR'
    };

    console.log('Generating questions for:', {
      background: backgroundData.name,
      student: studentProfile.full_name,
      tier: studentProfile.job_readiness_tier,
      questionQuantity: background.question_quantity
    });

    // Generate questions using AI
    const questionsResponse = await generateInterviewQuestions(
      backgroundData, 
      studentProfile, 
      background.question_quantity
    );

    return NextResponse.json({
      success: true,
      background: backgroundData,
      ...questionsResponse
    });

  } catch (error) {
    console.error('Error generating interview questions:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
} 