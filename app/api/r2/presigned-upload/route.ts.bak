import { NextRequest, NextResponse } from 'next/server';
import { authenticateApiRequestUltraFast } from '@/lib/auth/api-auth';
import { generatePresignedUploadUrl, UPLOAD_CONFIGS } from '@/lib/r2/presigned-upload-service';
import { z } from 'zod';
import { securityLogger, SecurityEventType, SecuritySeverity, SecurityCategory } from '@/lib/security';

const requestSchema = z.object({
  filename: z.string().min(1).max(255),
  contentType: z.string().min(1),
  uploadType: z.enum(['expertSessions', 'lessonVideos', 'interviewRecordings']),
  metadata: z.record(z.string()).optional(),
});

export async function POST(request: NextRequest) {
  // Log R2 presigned URL generation attempt
  securityLogger.logEvent({
    eventType: SecurityEventType.CONFIGURATION_ACCESS,
    severity: SecuritySeverity.WARNING,
    category: SecurityCategory.CONFIGURATION,
    endpoint: '/api/r2/presigned-upload',
    method: 'POST',
    details: {
      operation: 'presigned_url_generation',
      stage: 'attempt'
    }
  }, request);

  try {
    // Authenticate request
    const authResult = await authenticateApiRequestUltraFast(['Admin', 'student'], request);
    if ('error' in authResult) {
      securityLogger.logEvent({
        eventType: SecurityEventType.UNAUTHORIZED_ACCESS,
        severity: SecuritySeverity.WARNING,
        category: SecurityCategory.AUTHORIZATION,
        endpoint: '/api/r2/presigned-upload',
        method: 'POST',
        details: {
          operation: 'presigned_url_generation',
          error: authResult.error
        }
      }, request);
      return NextResponse.json({ error: authResult.error }, { status: authResult.status });
    }

    const body = await request.json();
    const { filename, contentType, uploadType, metadata } = requestSchema.parse(body);

    // Get upload configuration
    const config = UPLOAD_CONFIGS[uploadType];
    if (!config) {
      return NextResponse.json({ error: 'Invalid upload type' }, { status: 400 });
    }

    // For expert sessions and lessons, require admin role
    if (['expertSessions', 'lessonVideos'].includes(uploadType)) {
      const { user, supabase } = authResult;
      const { data: profile } = await supabase
        .from('profiles')
        .select('role')
        .eq('id', user.id)
        .single();

      if (!profile || profile.role?.toLowerCase() !== 'admin') {
        securityLogger.logEvent({
          eventType: SecurityEventType.ROLE_VALIDATION_FAILED,
          severity: SecuritySeverity.CRITICAL,
          category: SecurityCategory.AUTHORIZATION,
          userId: authResult.user.id,
          userRole: profile?.role || 'unknown',
          endpoint: '/api/r2/presigned-upload',
          method: 'POST',
          details: {
            operation: 'presigned_url_generation',
            uploadType,
            requiredRole: 'admin',
            actualRole: profile?.role || 'unknown'
          }
        }, request);
        return NextResponse.json({ error: 'Admin access required' }, { status: 403 });
      }
    }

    // Check environment variables
    if (!process.env.R2_ACCESS_KEY_ID || !process.env.R2_SECRET_ACCESS_KEY) {
      console.error('Missing R2 credentials (R2_ACCESS_KEY_ID or R2_SECRET_ACCESS_KEY)');
      return NextResponse.json({ error: 'Server configuration error' }, { status: 500 });
    }
    if (!process.env.R2_ENDPOINT && !process.env.R2_ACCOUNT_ID) {
      console.error('Missing R2 endpoint configuration (R2_ENDPOINT or R2_ACCOUNT_ID)');
      return NextResponse.json({ error: 'Server configuration error' }, { status: 500 });
    }

    // Generate presigned URL
    const result = await generatePresignedUploadUrl(filename, contentType, config);

    securityLogger.logEvent({
      eventType: SecurityEventType.CONFIGURATION_ACCESS,
      severity: SecuritySeverity.WARNING,
      category: SecurityCategory.CONFIGURATION,
      userId: authResult.user.id,
      userRole: authResult.claims.user_role,
      endpoint: '/api/r2/presigned-upload',
      method: 'POST',
      details: {
        operation: 'presigned_url_generation',
        uploadType,
        filename,
        contentType,
        bucket: result.bucket,
        expiresIn: result.expiresIn,
        stage: 'success'
      }
    }, request);

    return NextResponse.json({
      success: true,
      uploadUrl: result.uploadUrl,
      publicUrl: result.publicUrl,
      key: result.key,
      bucket: result.bucket,
      expiresIn: result.expiresIn,
      metadata: {
        filename,
        contentType,
        uploadType,
        maxSize: config.maxSizeBytes,
        ...metadata,
      },
    });

  } catch (error) {
    console.error('Error generating presigned URL:', error);
    
    if (error instanceof z.ZodError) {
      return NextResponse.json({ 
        error: 'Invalid request data',
        details: error.errors 
      }, { status: 400 });
    }

    // Enhanced error logging
    return NextResponse.json({ 
      error: 'Failed to generate upload URL',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
} 