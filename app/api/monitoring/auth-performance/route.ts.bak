import { NextRequest, NextResponse } from 'next/server';
import { AuthPerformanceMonitor } from '@/lib/monitoring/auth-performance-monitor';
import { authenticateApiRequestUltraFast } from '@/lib/auth/api-auth';

export async function GET(request: NextRequest) {
  const url = new URL(request.url);
  const action = url.searchParams.get('action') || 'metrics';
  
  try {
    // Authenticate the request (admin/staff only)
    const authResult = await authenticateApiRequestUltraFast(['Admin', 'Staff']);
    
    if ('error' in authResult) {
      // Log authentication failure with proper context
      console.error('Auth performance monitoring access denied:', {
        error: authResult.error,
        status: authResult.status,
        action,
        endpoint: '/api/monitoring/auth-performance',
        timestamp: new Date().toISOString()
      });
      
      return NextResponse.json({ 
        error: authResult.error,
        message: 'Admin or Staff role required for performance monitoring'
      }, { status: authResult.status });
    }

    // Create monitor instance within request context
    const monitor = new AuthPerformanceMonitor();

    switch (action) {
      case 'metrics':
        const metrics = await monitor.getPerformanceMetrics();
        return NextResponse.json(metrics);

      case 'report':
        const report = await monitor.generatePerformanceReport();
        return NextResponse.json(report);

      case 'health':
        const health = await monitor.healthCheck();
        return NextResponse.json(health);

      case 'trends':
        const timeRange = url.searchParams.get('range') as 'hour' | 'day' | 'week' || 'hour';
        const trends = monitor.getPerformanceTrends(timeRange);
        return NextResponse.json(trends);

      default:
        return NextResponse.json({ 
          error: 'Invalid action',
          valid_actions: ['metrics', 'report', 'health', 'trends']
        }, { status: 400 });
    }
  } catch (error) {
    console.error('Auth performance monitoring error:', {
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
      action,
      endpoint: '/api/monitoring/auth-performance',
      timestamp: new Date().toISOString()
    });
    
    return NextResponse.json(
      { 
        error: 'Internal server error',
        message: 'Performance monitoring service temporarily unavailable'
      },
      { status: 500 }
    );
  }
}